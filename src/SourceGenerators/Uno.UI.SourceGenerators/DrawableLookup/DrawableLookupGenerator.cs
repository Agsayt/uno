#nullable enable

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Diagnostics;
using System.Globalization;
using System.Xml;
using Uno.Roslyn;
using Microsoft.CodeAnalysis;
using Uno.Extensions;
using Uno.Logging;
using Uno.UI.SourceGenerators.Telemetry;
using Uno.UI.Xaml;
using Uno.UI.SourceGenerators.Helpers;
using System.Threading.Tasks;

#if NETFRAMEWORK
using Microsoft.Build.Execution;
using Uno.SourceGeneration;
using GeneratorExecutionContext = Uno.SourceGeneration.GeneratorExecutionContext;
#endif

namespace Uno.UI.SourceGenerators.DrawableLookup
{
	[Generator]
	public class DrawableLookupGenerator : ISourceGenerator
	{
		private List<IFieldSymbol>? _drawableSymbols;
		private string? _rootNamespace;
		private IReadOnlyDictionary<string, INamedTypeSymbol[]>? _abc;
		private IAssemblySymbol? _a;

		public void Initialize(GeneratorInitializationContext context)
		{
		}

		public void Execute(GeneratorExecutionContext context)
		{

			if (!PlatformHelper.IsAndroid(context))
			{
				return;
			}

			_rootNamespace = context.GetMSBuildPropertyValue("RootNamespace");
			var resource = context.Compilation.GetTypeByMetadataName($"{_rootNamespace}.Resource");
		
			_abc = context.Compilation.GetSymbolNameLookup();
			_a = context.Compilation.Assembly;
			_drawableSymbols = resource?.GetTypeMembers()
				.FirstOrDefault(x => x.Name == "Drawable")
				?.GetFields()
				.Where(x => x.IsConst)
				.ToList();

			context.AddSource("DrawableLookup", GenerateLookupClass());
		}

		private string GenerateLookupClass()
		{
			var writer = new IndentedStringBuilder();

			writer.AppendLineInvariant("// <autogenerated />");
			writer.AppendLineInvariant("#if __ANDROID__");
			writer.AppendLineInvariant("using System.Collections.Generic;");
			writer.AppendLineInvariant("");

			using (writer.BlockInvariant($"namespace {_rootNamespace}"))
			{
				using (writer.BlockInvariant("public partial class Resource"))
				{
					using (writer.BlockInvariant("public partial class Drawable"))
					{
						using (writer.BlockInvariant("public static Dictionary<string, int> GetDrawableMap()"))
						{
							using (writer.BlockInvariant("return new Dictionary<string, int>"))
							{
						
								writer.AppendLineInvariant($"//a is null?: {_a == null}");
								if (_a != null)
								{
									GetAllSymbolsVisitor visitor = new GetAllSymbolsVisitor(x => writer.AppendLineInvariant($"//Member: {x}"));
									visitor.Visit(_a.GlobalNamespace);
									foreach (var x in _a.GlobalNamespace.GetMembers().OfType<INamedTypeSymbol>().Where(x => x.Name.Contains("Resource")))
									{
										writer.AppendLineInvariant($"//Member: {x}");
									}
								}
								if (_abc != null && _abc.TryGetValue("Resource", out var types))
								{
									foreach (var t in types)
									{
										writer.AppendLineInvariant($"//Type: {t}");
									}
								}
								foreach (var drawableSymbol in _drawableSymbols.Safe())
								{
									using (writer.BlockInvariant(""))
									{
										writer.AppendLineInvariant("\"{0}\", {1}", drawableSymbol.Name, drawableSymbol.ConstantValue);

									}
									writer.Append(",");
								}
							}
							writer.Append(";");
						}
					}
				}
			}
			writer.AppendLineInvariant("#endif");

			return writer.ToString();
		}

		public class GetAllSymbolsVisitor : SymbolVisitor
		{
			Action<INamedTypeSymbol> _action;
			public GetAllSymbolsVisitor(Action<INamedTypeSymbol> action)
			{
				_action = action;
			}
			public override void VisitNamespace(INamespaceSymbol symbol)
			{
				foreach (var childSymbol in symbol.GetTypeMembers())
				{
					//Once againt we must accept the children to visit 
					//all of their children
					childSymbol.Accept(this);
				}
			}

			public override void VisitNamedType(INamedTypeSymbol symbol)
			{
				_action(symbol);

				foreach (var childSymbol in symbol.GetTypeMembers())
				{
					//Once againt we must accept the children to visit 
					//all of their children
					childSymbol.Accept(this);
				}
			}
		}
	}
}
